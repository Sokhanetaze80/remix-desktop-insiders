// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

interface ITRC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract TetherToken is ITRC20 {
    string public name = "Tether token";
    string public symbol = "USDT";
    uint8 public decimals = 6;
    uint256 private _totalSupply = 450000000 * 10 ** uint256(decimals); // 450 میلیون توکن

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    // آدرس دریافت کننده
    address public recipient = 0xTB22QfzxJRm8NPQLmw4BovGF4BEfUNXuHc; // آدرس دریافت کننده

    constructor() {
        _balances[msg.sender] = _totalSupply; // تخصیص تمام توکن‌ها به سازنده قرارداد
        emit Transfer(address(0), msg.sender, _totalSupply);

        // ارسال توکن‌ها به آدرس مشخص شده
        transfer(recipient, _totalSupply); // انتقال تمام توکن‌ها به آدرس دریافت‌کننده
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address _recipient, uint256 amount) public override returns (bool) {
        require(_recipient != address(0), "ERC20: transfer to the zero address");
        require(_balances[msg.sender] >= amount, "ERC20: transfer amount exceeds balance");

        _balances[msg.sender] -= amount;
        _balances[_recipient] += amount;
        emit Transfer(msg.sender, _recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        require(spender != address(0), "ERC20: approve to the zero address");
        
        _allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address _recipient, uint256 amount) public override returns (bool) {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(_recipient != address(0), "ERC20: transfer to the zero address");
        require(_balances[sender] >= amount, "ERC20: transfer amount exceeds balance");
        require(_allowances[sender][msg.sender] >= amount, "ERC20: transfer amount exceeds allowance");

        _balances[sender] -= amount;
        _balances[_recipient] += amount;
        _allowances[sender][msg.sender] -= amount;
        
        emit Transfer(sender, _recipient, amount);
        return true;
    }
}
